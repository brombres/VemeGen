#================================================================================
# MkVeme.rogue
# May 25, 2023
#================================================================================

$define VERSION "1.0"
$define DATE    "May 25, 2023"

$requireRogue "2.17"

$include Script
$include IMFont
$include SubtitleTiming
$include TimeSegment
$include VideoTimestamp

uses Console/CommandLineParser
uses Graphics
uses Graphics/BitmapIO

try
  MkVeme( System.command_line_arguments )

catch (error:Error)
  Console.error.println error
  System.exit 1
endTry

class MkVeme
  PROPERTIES
    video_file : File
    frame_size : XY

  METHODS
    method init( args:String[] )
      local command = parse_args( args )

      local type : String
      if (command//options//type)
        type = command//options//type
        which (type)
          case "HitlerReacts"
            noAction
          others
            throw Error( "[Error] Unsupported veme type '$'."(type) )
        endWhich
      endIf

      if (command//options//help or command//args.count != 1)
        print_usage
        System.exit 0
      endIf

      local script = Script( command//args[0], type )
      type = script.type

      local timing = SubtitleTiming[ type ]

      local modified = false
      forEach (segment at i in timing)
        if (i+1 < timing.count)
          if (segment.end.seconds >= timing[i+1].start.seconds)
            trace segment
            modified = true
          endIf
        endIf
      endForEach
      if (modified) System.exit

      if (script.subtitles.count != timing.count)
        throw Error( "[Error] Script is wrong length - $ subtitles required, found $."(timing.count,script.subtitles.count) )
      endIf

      install_media( type )

      local project_name = File( script.filepath.before_first(".txt") ).filename
      local work_folder = File( "." + project_name )

      println "Creating work folder $/"(work_folder)
      work_folder.create_folder

      local font = IMFont( font_name, (64*frame_size.y)/720 )
      local ffmpeg_script = (work_folder / "ffmpeg_script.txt").print_writer
      print "Generating $ subtitles"(script.count)
      flush
      forEach (sub_index in 0..<script.count)
        print '.'
        flush
        font.create_subtitled_frame( frame_size, script[sub_index], File(work_folder/(sub_index+".png")) )

        ffmpeg_script.println "movie=$/$.png[i$];"(work_folder,sub_index,sub_index)
      endForEach
      println

      local prev = "0"
      forEach (sub_index in 0..<script.count)
        local input = "i$"(sub_index)
        local next = "v$"(sub_index)
        local start_time = timing[sub_index].start.seconds.format(".3")
        local end_time   = timing[sub_index].end.seconds.format(".3")
        ffmpeg_script.println ''[$][$] overlay=0:0:enable='between(t,$,$)'[$];''(prev,input,start_time,end_time,next)
        prev = next
      endForEach
      ffmpeg_script.close

      local video_file = File(System.executable_filepath).parent / "$.mp4"(type)
      local outfile = File( project_name + ".mp4" )

      local cmd = ''ffmpeg -y -hide_banner -loglevel error -stats -i $ -filter_complex_script $/ffmpeg_script.txt -map "[v$]" -map 0:a $''...
        (video_file.esc,work_folder,script.count-1,outfile.esc)
      println "> " + cmd
      System.run cmd

      work_folder.delete

    method frame_size->XY
      if (@frame_size.min > 0) return @frame_size

      local cmd = "ffprobe -v error -select_streams v -show_entries stream=width,height -of json $"(video_file.esc)
      local result = Process.run( cmd, &env )
      if (result.success)
        local info = JSON.parse( result->String )
        if (info//streams.count)
          local w = info//streams[0]//width->Int32
          local h = info//streams[0]//height->Int32
          @frame_size = XY( w, h )
          return @frame_size
        endIf
      endIf
      throw Error( "[ERROR] Could not determine size of '$'."(video_file) )

    method font_name->String
      if (System.is_linux) return "Garuda"
      else                 return "Arial"

    method install_media( type:String )
      video_file = File(System.executable_filepath).parent / "$.mp4"(type)

      if (not video_file.exists)
        println
        which (type)
          case "HitlerReacts"
            println @|Download "Hitler's Rage - Downfall video with no subtitles" from YouTube.
            println "YouTube link:            https://youtu.be/YHtSUcw4q4M"
            println "YouTube downloader link: https://www.y2mate.com/youtube/YHtSUcw4q4M"
        endWhich
        println
        println "Drag and drop the video onto this window or paste the file location here:"
        local filepath = Console.input( "> " )
        local src_file = File( filepath.trimmed.unescaped )
        if (not src_file.exists)
          throw Error( "File not found: [$]"(src_file) )
        endIf

        local cmd = "cp $ $"(src_file.esc,video_file.esc)
        println "> $"(cmd)
        System.run( cmd )
      endIf

    method parse_args( args:String[] )->Value
      local command = CommandLineParser().
      [
        option( "--help",  &aliases=["-h","-?"] )
        option( "--type=", &alias="-t" )
      ].parse( args )
      return command

    method print_usage
      println "MkVeme v$"(VERSION)
      println "$ by Brom Bresenham"(DATE)
      println

      println @|USAGE
               |  mkveme [OPTIONS] <ScriptName>
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.
               |
               |  --type=<VemeType>, -t <VemeType>
               |    'HitlerReacts' the currently the only supported type.
               |
               |DESCRIPTION
               |  If the specified script file does not exist then it is created with
               |  placeholder dialog.
               |
               |  If the script does exist, a video meme is created using subtitles from the
               |  script file. The output veme filename is 'ScriptName.mp4'.

endClass
