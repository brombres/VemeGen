uses Utility/Timer

class Veme [abstract]
  PROPERTIES
    video_file  : File
    frame_size  : XY
    font_height = 48

  METHODS
    method init_object
      Vemes[ type_name ] = this

    method font_name->String
      if (System.is_linux) return "Garuda"
      else                 return "Arial"

    method create_default_script( file:File ) [abstract]

    method frame_size->XY
      if (@frame_size.min > 0) return @frame_size

      local cmd = "ffprobe -v error -select_streams v -show_entries stream=width,height -of json $"(video_file.esc)
      local result = Process.run( cmd, &env )
      if (result.success)
        local info = JSON.parse( result->String )
        if (info//streams.count)
          local w = info//streams[0]//width->Int32
          local h = info//streams[0]//height->Int32
          @frame_size = XY( w, h )
          return @frame_size
        endIf
      endIf
      throw Error( "[ERROR] Could not determine size of '$'."(video_file) )

    method generate( filepath:String, script:Script )
      localize timing

      local modified = false
      forEach (segment at i in timing)
        if (i+1 < timing.count)
          if (segment.end.seconds >= timing[i+1].start.seconds)
            trace segment
            modified = true
          endIf
        endIf
      endForEach
      if (modified) System.exit

      if (script.subtitles.count != timing.count)
        throw Error( "[Error] Script is wrong length - $ subtitles required, found $."(timing.count,script.subtitles.count) )
      endIf

      install_media

      local project_name = File( filepath ).filename
      local work_folder = File( "." + File(filepath).filename )

      println "Creating work folder $/"(work_folder)
      work_folder.create_folder

      local font = VGFont( font_name, (font_height*frame_size.y)/720 )
      local ffmpeg_script = (work_folder / "ffmpeg_script.txt").print_writer
      print "Generating $ subtitles"(script.count)
      flush
      forEach (sub_index in 0..<script.count)
        print '.'
        flush
        font.create_subtitled_frame( frame_size, script[sub_index], File(work_folder/(sub_index+".png")) )

        ffmpeg_script.println "movie=$/$.png[i$];"(work_folder,sub_index,sub_index)
      endForEach
      println

      local prev = "0"
      forEach (sub_index in 0..<script.count)
        local input = "i$"(sub_index)
        local next = "v$"(sub_index)
        local start_time = timing[sub_index].start.seconds.format(".3")
        local end_time   = timing[sub_index].end.seconds.format(".3")
        ffmpeg_script.println ''[$][$] overlay=0:0:enable='between(t,$,$)'[$];''(prev,input,start_time,end_time,next)
        prev = next
      endForEach
      ffmpeg_script.close

      local video_file = File(System.executable_filepath).parent / "$$.mp4"(type,which{Settings.is_preview:"-Preview"||""})
      local outfile = File( project_name + ".mp4" )

      println "Encoding video with overlaid subtitles..."
      local cmd = ''ffmpeg -y -hide_banner -loglevel error -stats -i $ ''(video_file.esc)
      cmd += ''-filter_complex_script $/ffmpeg_script.txt ''(work_folder)
      cmd += ''-map "[v$]" -map 0:a $''(script.count-1,outfile.esc)
      println "> " + cmd
      System.run cmd

      println "Deleting work folder $/"(work_folder)
      println "Veme complete: $"(outfile)
      work_folder.delete

    method install_media [abstract]

    method install_media( install_message:String )
      video_file = File(System.executable_filepath).parent / "$.mp4"(type)

      if (not video_file.exists)
        println
        println install_message
        println
        println "Drag and drop the video onto this window or paste the file location here:"
        local filepath = Console.input( "> " )
        local src_file = File( filepath.trimmed.unescaped )
        if (not src_file.exists)
          throw Error( "File not found: [$]"(src_file) )
        endIf

        println ''> Copy "$" -> "$"'' (src_file,video_file)
        src_file.copy_to( video_file )
      endIf

      if (Settings.is_preview)
        local preview_file = File(System.executable_filepath).parent / "$-Preview.mp4"(type)
        if (not preview_file.exists)
          println "Creating low-res preview video template..."
          local cmd = ''ffmpeg -y -hide_banner -loglevel error -stats -i $ ''(video_file.esc)
          cmd +=  ''-filter:v scale=480:-1 -c:a copy $''(preview_file.esc)
          println "> " + cmd
          System.run cmd
        endIf
        video_file = preview_file
      endIf

    method timing->TimeSegment[] [abstract]

    method type->String
      return type_name

endClass
