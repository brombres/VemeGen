#================================================================================
# VemeGen.rogue
# May 25, 2023
#================================================================================

$define VERSION "1.0"
$define DATE    "June 3, 2023"

$requireRogue "2.17"

$include VGFont
$include Script
$include Subtitle
$include Template
$include VideoTimestamp

$include Templates

uses Console/CommandLineParser
uses Graphics
uses Graphics/BitmapIO

try
  VemeGen.init( System.command_line_arguments )

catch (error:Error)
  local w = 80.or_smaller( Console.width )
  Console.error.println "=" * w
  Console.error.println error->String.word_wrapped( w )
  Console.error.println "=" * w
  System.exit 1
endTry

class Templates : [String:String] [singleton]
endClass

class VemeGen [singleton]
  PROPERTIES
    type         : String
    project_name : String
    script_file  : File
    output_file  : File
    video_file   : File
    is_preview   : Logical
    font_height  = 48
    frame_size   : XY

  METHODS
    method init( args:String[] )
      local command = parse_args( args )

      if (command//options//type)
        type = command//options//type->String
      endIf

      if (command//options//preview)
        is_preview = true
      endIf

      if (command//options//help or command//args.count != 1)
        print_usage
        System.exit 0
      endIf

      local filepath = command//args[0]->String
      if (filepath.ends_with(".txt",&ignore_case))     filepath .= leftmost(-4)
      elseIf (filepath.ends_with(".mp4",&ignore_case)) filepath .= leftmost(-4)
      elseIf (filepath.ends_with('.'))                 filepath .= leftmost(-1)

      project_name = File( filepath ).filename
      script_file = File( filepath + ".txt" )
      output_file = File( project_name + ".mp4" )

      if (command//options//create)
        if (script_file.exists)
          throw Error( ''Script file "$" already exists.''(script_file) )
        endIf

        local template : String
        if (type) template = Templates[ type ]

        if (not template)
          if (not type) type = "Custom"

          template =
            @|$type $TYPE
             |
             |$videoInfo
             ||Add information here about how and where to obtain the video for a $TYPE veme.
             ||
             ||<YouTube Link>
             ||<etc.>
             |
             |         # Comments start with '#' and are ignored
             |
             |[1.25]   This subtitle starts at 1.25 seconds with auto-duration.
             |
             |[5.1, 3] This subtitle starts at 5.1 seconds with a duration of 3 seconds.
             |
             |[10]     SPEAKER 1: Any label before the first ':' is ignored.
             |
             |[13]     SPEAKER 2: "SPEAKER 1" vs "SPEAKER 2" doesn't make any difference in the output.
          template .= replacing( "$TYPE", type )
        endIf

        println ''Creating script file "$".''(script_file)
        println ''Edit and then generate the veme with: vemegen $''(script_file)
        script_file.save( template )
        return

      elseIf (command//options//type)
        throw Error( "'--type' can only be specified in tandem with '--create'." )
      endIf

      if (not script_file.exists)
        throw Error( ''No such script "$".''(script_file) +
                     '' Add '--create' with optional '--type=TypeName' (e.g. '--type=HitlerReacts') to create it.'' )
      endIf

      local script = Script( script_file )
      type = script.type
      if (is_preview)
        video_file = File( System.executable_filepath ).parent / "$-Preview.mp4"(type)
      else
        video_file = File( System.executable_filepath ).parent / "$.mp4"(type)
      endIf

      install_media( script )
      generate_veme( script )

    method font_name->String
      if (System.is_linux) return "Garuda"
      else                 return "Arial"

    method frame_size->XY
      if (@frame_size.min > 0) return @frame_size

      local cmd = "ffprobe -v error -select_streams v -show_entries stream=width,height -of json $"(video_file.esc)
      local result = Process.run( cmd, &env )
      if (result.success)
        local info = JSON.parse( result->String )
        if (info//streams.count)
          local w = info//streams[0]//width->Int32
          local h = info//streams[0]//height->Int32
          @frame_size = XY( w, h )
          return @frame_size
        endIf
      endIf
      throw Error( "[ERROR] Could not determine size of '$'."(video_file) )

    method generate_veme( script:Script )
      local work_folder = File( "." + project_name )

      println "Creating work folder $/"(work_folder)
      work_folder.create_folder

      local font = VGFont( font_name, (font_height*frame_size.y)/720 )
      local ffmpeg_script = (work_folder / "ffmpeg_script.txt").print_writer
      print "Generating $ subtitles"(script.count)
      flush
      forEach (subtitle at sub_index in script)
        print '.'
        flush
        font.create_subtitled_frame( frame_size, subtitle.text, File(work_folder/(sub_index+".png")) )

        ffmpeg_script.println "movie=$/$.png[i$];"(work_folder,sub_index,sub_index)
      endForEach
      println

      local prev = "0"
      forEach (sub at sub_index in script)
        local input = "i$"(sub_index)
        local next = "v$"(sub_index)
        local start_time = sub.start_time.format(".3")
        local end_time   = sub.end_time.format(".3")
        ffmpeg_script.println ''[$][$] overlay=0:0:enable='between(t,$,$)'[$];''(prev,input,start_time,end_time,next)
        prev = next
      endForEach
      ffmpeg_script.close

      println "Rencoding video with subtitles..."
      local cmd = ''ffmpeg -y -hide_banner -loglevel error -stats -i $ ''(video_file.esc)
      cmd += ''-filter_complex_script $/ffmpeg_script.txt ''(work_folder)
      cmd += ''-map "[v$]" -map 0:a $''(script.count-1,output_file.esc)
      println "> " + cmd
      System.run cmd

      println "Deleting work folder $/"(work_folder)
      println "Veme complete: $"(output_file)
      work_folder.delete

    method install_media( script:Script )
      if (not video_file.exists)
        println
        println script.video_info
        println
        println "Drag and drop the video onto this window or paste the file location here:"
        local filepath = Console.input( "> " )
        local src_file = File( filepath.trimmed.unescaped )
        if (not src_file.exists)
          throw Error( "File not found: [$]"(src_file) )
        endIf

        println ''> Copy "$" -> "$"'' (src_file,video_file)
        src_file.copy_to( video_file )
      endIf

      if (is_preview)
        local preview_file = File(System.executable_filepath).parent / "$-Preview.mp4"(type)
        if (not preview_file.exists)
          println "Creating low-res preview video template..."
          local cmd = ''ffmpeg -y -hide_banner -loglevel error -stats -i $ ''(video_file.esc)
          cmd +=  ''-filter:v scale=480:-1 -c:a copy $''(preview_file.esc)
          println "> " + cmd
          System.run cmd
        endIf
        video_file = preview_file
      endIf

    method parse_args( args:String[] )->Value
      local command = CommandLineParser().
      [
        option( "--create",  &alias="-c" )
        option( "--help",    &aliases=["-h","-?"] )
        option( "--preview", &alias="-p" )
        option( "--type=",   &alias="-t" )
      ].parse( args )
      return command

    method print( text:String )
      text .= word_wrapped( 80.or_smaller(Console.width) )
      Global.print( text )

    method println
      Global.println

    method println( text:String )
      text .= word_wrapped( 80.or_smaller(Console.width) )
      Global.println( text )

    method print_usage
      println "VemeGen v$"(VERSION)
      println "$ by Brom Bresenham"(DATE)
      println

      println @|USAGE
               |  vemegen [OPTIONS] <ScriptName.txt>
               |
               |OPTIONS
               |  --create
               |    Creates a new veme script. Defaults to type 'Custom' if no other '--type'
               |    is specified.
               |
               |  --help, -h, -?
               |    Show this help text.
               |
               |  --preview, -p
               |    Faster veme rendering using lower resolution.
               |
               |  --type=<VemeType>, -t <VemeType>
               |    Specify an arbitrary type name or one of the predefined templates:
               |    - HitlerReacts

endClass
